/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package it.alecata.sagra.web.swagger.api;


import io.swagger.annotations.*;
import it.alecata.sagra.web.swagger.model.*;
import it.alecata.sagra.web.swagger.model.TavoloAccomodatoDto.StatoEnum;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-07-25T09:45:13.933Z")

@Api(value = "tavoli", description = "the tavoli API")
public interface TavoliApi {

    @ApiOperation(value = "Crea un nuovo tavolo accomodato", notes = "Crea un nuovo tavolo accomodato", response = TavoloAccomodatoDto.class,  
    		tags={ "accomodatore", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = TavoloAccomodatoDto.class),
        @ApiResponse(code = 400, message = "Errore parametri", response = Void.class) })
    
    @RequestMapping(value = "/api/tavoli/apriTavoloAccomodato",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<TavoloAccomodatoDto> apriTavoloAccomodato(@ApiParam(value = "idTavoloReale, codice, descrizione, numCoperti, accomodatoPersona" ,required=true )  @Valid @RequestBody TavoloAccomodatoDto body);


    @ApiOperation(value = "Chiude un tavolo accomodato", notes = "Chiude un tavolo accomodato", response = TavoloAccomodatoDto.class, 
    		tags={ "accomodatore", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = TavoloAccomodatoDto.class),
        @ApiResponse(code = 400, message = "Errore parametri", response = Void.class) })
    
    @RequestMapping(value = "/api/tavoli/chiudiTavoloAccomodato",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<TavoloAccomodatoDto> chiudiTavoloAccomodato(@ApiParam(value = "idTavoloAccomodato, accomodatoPersona" ,required=true )  @Valid @RequestBody TavoloAccomodatoDto body);


    @ApiOperation(value = "Cerca tavoli accomodati", notes = "Cerca tavoli accomodati di un tavolo reale", response = TavoloAccomodatoDto.class, responseContainer = "List", 
    		tags={ "accomodatore", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = TavoloAccomodatoDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Errore parametri", response = Void.class) })
    
    @RequestMapping(value = "/api/tavoli/listaTavoliAccomodatiByTavoloId",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<TavoloAccomodatoDto>> listaTavoliAccomodatiByTavoloId( @NotNull@ApiParam(value = "Identificativo del tavolo reale", required = true) @RequestParam(value = "idTavoloReale", required = true) Long idTavoloReale);

    
    @ApiOperation(value = "Imposta stato tavolo accomodato", notes = "Imposta stato tavolo accomodato", response = TavoloAccomodatoDto.class, 
    		tags={ "accomodatore", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = TavoloAccomodatoDto.class),
        @ApiResponse(code = 400, message = "Errore parametri", response = Void.class) })
    
    @RequestMapping(value = "/api/tavoli/impostaStatoTavoloAccomodato",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<TavoloAccomodatoDto> impostaStatoTavoloAccomodato( @NotNull@ApiParam(value = "Identificativo del tavolo accomodato", required = true) @RequestParam(value = "idTavoloAccomodato", required = true) Long idTavoloReale,
    		 @NotNull@ApiParam(value = "stato del tavolo accomodato", required = true) @RequestParam(value = "stato", required = true) StatoEnum stato,
    		 @NotNull@ApiParam(value = "personaModifica", required = true) @RequestParam(value = "persona", required = true) String persona);



    @ApiOperation(value = "Cerca tavoli reali", notes = "Cerca tavoli reali", response = TavoloRealeDto.class, responseContainer = "List", 
    		tags={ "accomodatore", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = TavoloRealeDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Errore parametri", response = Void.class) })
    
    @RequestMapping(value = "/api/tavoli/listaTavoliReali",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<TavoloRealeDto>> listaTavoliReali(@ApiParam(value = "Solo tavoli liberi") @RequestParam(value = "soloLiberi", required = false) Boolean soloLiberi);

}
